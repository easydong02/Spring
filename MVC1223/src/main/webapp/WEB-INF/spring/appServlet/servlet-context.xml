<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- 스프링이 DB연동기술도 지원해준다, 이때 데이터베이스에 대한 선택과 JNDI에 대한 설정을 여기서 해보자
	 resource-ref="true" java: comp/env ~~
	 -->
	<jee:jndi-lookup 
	id="dataSource"
	jndi-name="jdbc/oracle"
	resource-ref="true"
	/>
	
	
	
	<!-- 트랜잭션 매니저 등록
		개발자가 각 기술에 맞게, 처리해야할 트랜잭션 코드를 스프링이 지원할 경우, 코드의 효율적인 작성이 가능함..
		예)Service에서 DAO에게 Connection을 직접 배분(X)
		사용하려는 기술 JDBC, Mybatis : DataSourceTransactionManager
		기술 hibernate: HibernateTransactionManager
		기술 jpa: JpaTransactionManager
	 -->
	<beans:bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" 
	id ="dataSourceTransactionManager" 
	p:dataSource-ref="dataSource"/>
	
	<!-- jdbc기반의 연동을 위한 DAO들이 사용하게될 jdbctemplate를 등록하자(우리가 만든거 아니라서 등록해야댐) -->
	<beans:bean class="org.springframework.jdbc.core.JdbcTemplate" id = "jdbcTemplate"
	p:dataSource-ref="dataSource"
	/>
	
	<!-- Mybatis 연동을 위한 설정 시작 -->
	<beans:bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactoryBean"
	p:configLocation="classpath:com/koreait/mvc1223/mybatis/config.xml"
	p:dataSource-ref="dataSource"
	/>
	
	<beans:bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSessionTemplate">
		<beans:constructor-arg index="0" ref="sqlSessionFactoryBean"/>
	</beans:bean>
	
	<!-- Mybatis 연동을 위한 설정 끝 -->
	

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 파일업로드를 위한 빈 등록 -->
	<beans:bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" 
	id ="multipartResolver"/>
	
	
	
	<!-- 앞으로, 빈즈들은 일일이 빈태그로 등록할 필요 없다 -->
	<context:component-scan base-package="com.koreait.mvc1223" />
	
	 
	
	
</beans:beans>
